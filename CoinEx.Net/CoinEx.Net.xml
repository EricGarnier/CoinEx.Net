<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoinEx.Net</name>
    </assembly>
    <members>
        <member name="T:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot">
            <summary>
            Client for the CoinEx REST API
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.#ctor">
            <summary>
            Create a new instance of CoinExClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.#ctor(CoinEx.Net.Objects.CoinExClientSpotOptions)">
            <summary>
            Create a new instance of CoinExClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.SetDefaultOptions(CoinEx.Net.Objects.CoinExClientSpotOptions)">
            <summary>
            Set the default options to be used when creating new socket clients
            </summary>
            <param name="options">The options to use for new clients</param>
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.SetApiCredentials(System.String,System.String,CryptoExchange.Net.Interfaces.INonceProvider)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
            <param name="nonceProvider">Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that</param>
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpot.GetSymbolName(System.String,System.String)">
            <summary>
            Get the name of a symbol for CoinEx based on the base and quote asset
            </summary>
            <param name="baseAsset"></param>
            <param name="quoteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetAssetConfigAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderType,CoinEx.Net.Enums.OrderSide,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.GetOpenOrdersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.GetOpenStopOrdersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.GetExecutedOrdersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.GetOrderAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.GetOrderTradesAsync(System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.GetUserTradesAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Rest.Spot.CoinExClientSpotTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot">
            <summary>
            Client for the CoinEx socket API
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.#ctor">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.#ctor(CoinEx.Net.Objects.CoinExSocketClientSpotOptions)">
            <summary>
            Create a new instance of CoinExSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SetApiCredentials(System.String,System.String,CryptoExchange.Net.Interfaces.INonceProvider)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
            <param name="nonceProvider">Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that</param>
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SetDefaultOptions(CoinEx.Net.Objects.CoinExSocketClientSpotOptions)">
            <summary>
            Set the default options to be used when creating new socket clients
            </summary>
            <param name="options">The options to use for new clients</param>
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.PingAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetServerTimeAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetSymbolStateAsync(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetTradeHistoryAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.GetOpenOrdersAsync(System.String,CoinEx.Net.Enums.OrderSide,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToSymbolStateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToSymbolStateUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.CoinExKline}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.CoinExBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Websocket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.ProcessTokenData(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.Socket.CoinExSocketClientSpot.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.CoinExHelpers">
            <summary>
            CoinEx helpers
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.ToSeconds(CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Kline interval to seconds
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.MergeDepthIntToString(System.Int32)">
            <summary>
            Merge depth to string parameter
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.ValidateCoinExSymbol(System.String)">
            <summary>
            Validate the string is a valid CoinEx symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="T:CoinEx.Net.CoinExSymbolOrderBook">
            <summary>
            Symbol order book implementation
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExSymbolOrderBook.#ctor(System.String,CoinEx.Net.Objects.CoinExOrderBookOptions)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:CoinEx.Net.CoinExSymbolOrderBook.DoStartAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.CoinExSymbolOrderBook.DoResyncAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.CoinExSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.CoinExSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Enums.KlineInterval">
            <summary>
            Interval for klines
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeMinute">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FiveMinute">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FifteenMinute">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThirtyMinute">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwoHour">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FourHour">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.SixHour">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwelveHour">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeDay">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderOption">
            <summary>
            Options when placing an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.Normal">
            <summary>
            Normal order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.ImmediateOrCancel">
            <summary>
            Immediate or cancel order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.FillOrKill">
            <summary>
            Fill or kill order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.MakerOnly">
            <summary>
            Maker only order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Either">
            <summary>
            Either (only usable for filtering)
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderStatus">
            <summary>
            Status of an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Executed">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.PartiallyExecuted">
            <summary>
            Partially executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.UnExecuted">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderType">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopLimit">
            <summary>
            Stop limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop market order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TransactionRole">
            <summary>
            Role of a transaction
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Maker">
            <summary>
            Maker of a new order book entry
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Taker">
            <summary>
            Taker of an existing order book entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.UpdateType">
            <summary>
            Type of update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.WithdrawStatus">
            <summary>
            Status of a withdrawal
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Audit">
            <summary>
            Under audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Pass">
            <summary>
            Passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Confirming">
            <summary>
            Confirming
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.NotPass">
            <summary>
            Not passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Cancel">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Finish">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Fail">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpot">
            <summary>
            Interface for the CoinEx client
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpot.SetApiCredentials(System.String,System.String,CryptoExchange.Net.Interfaces.INonceProvider)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
            <param name="nonceProvider">Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that</param>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of balances. Requires API credentials
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of deposits. Requires API credentials and withdrawal permission on the API key
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address of an asset
            </summary>
            <param name="asset">The asset to deposit</param>
            <param name="smartContractName">Name of the network to use</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of withdrawals. Requires API credentials and withdrawal permission on the API key
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="withdrawId">Retrieve a withdrawal with a specific id</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from CoinEx to a specific address. Requires API credentials and withdrawal permission on the API key
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="localTransfer">Is it a local transfer between users or onchain</param>
            <param name="address">The address to withdraw to</param>
            <param name="quantity">The quantity to withdraw. This is the quantity AFTER fees have been deducted. For fee rates see https://www.coinex.com/fees </param>
            <param name="ct">Cancellation token</param>
            <returns>The withdrawal object</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel a specific withdrawal. Requires API credentials and withdrawal permission on the API key
            </summary>
            <param name="withdrawId">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the exchange rates of currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetAssetConfigAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asset configs
            </summary>
            <param name="assetType">Optionally only return a certain type of asset, for example BCH</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of symbols active on CoinEx
            </summary>
            <returns>List of symbol names</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of a specific symbol
            </summary>
            <param name="symbol">The symbol to retrieve state for</param>
            <param name="ct">Cancellation token</param>
            <returns>The state of the symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the states of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of states for all symbols</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for a symbol
            </summary>
            <param name="symbol">The symbol to retrieve depth data for</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="limit">The limit of results returned</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the latest trades for a symbol
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="fromId">The id from which on to return trades</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves kline data for a specific symbol
            </summary>
            <param name="symbol">The symbol to retrieve klines for</param>
            <param name="interval">The interval of the candles</param>
            <param name="limit">Limit of the number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the mining difficulty. Requires API credentials
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Mining difficulty</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderType,CoinEx.Net.Enums.OrderSide,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order. Requires API credentials
            </summary>
            <param name="symbol">The symbol to place the order for</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of a single unit of the order</param>
            <param name="orderOption">Option for the order</param>
            <param name="stopPrice">The stop-price of a single unit of the order</param>
            <param name="immediateOrCancel">True if the order should be filled immediately up on placing, otherwise it will be canceled</param>
            <param name="clientId">Client id which can be used to match the order</param>
            <param name="sourceId">User defined number</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order that was placed</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.GetOpenOrdersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open orders for a symbol. Requires API credentials
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.GetOpenStopOrdersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open stop orders for a symbol. Requires API credentials
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.GetExecutedOrdersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of executed orders for a symbol in the last 2 days. Requires API credentials
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of executed orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.GetOrderAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves details of an order. Requires API credentials
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="symbol">The symbol the order is for</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.GetOrderTradesAsync(System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves execution details of a specific order. Requires API credentials
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of an executed order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.GetUserTradesAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a list of trades you executed on a specific symbol. Requires API credentials
            </summary>
            <param name="symbol">The symbol to retrieve trades for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels an order. Requires API credentials
            </summary>
            <param name="symbol">The symbol the order is on</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the canceled order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all stop orders. Requires API credentials
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Rest.Spot.ICoinExClientSpotTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all orders. Requires API credentials
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot">
            <summary>
            Interface for the CoinEx socket client
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SetApiCredentials(System.String,System.String,CryptoExchange.Net.Interfaces.INonceProvider)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
            <param name="nonceProvider">Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that</param>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.PingAsync">
            <summary>
            Pings the server
            </summary>
            <returns>True if server responded, false otherwise</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetServerTimeAsync">
            <summary>
            Gets the server time
            </summary>
            <returns>The server time</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetSymbolStateAsync(System.String,System.Int32)">
            <summary>
            Get the symbol state
            </summary>
            <param name="symbol">The symbol to get the state for</param>
            <param name="cyclePeriod">The period to get data over, specified in seconds. i.e. one minute = 60, one day = 86400</param>
            <returns>Symbol state</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get an order book
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">The limit of results returned</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <returns>Order book of a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetTradeHistoryAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the latest trades on a symbol
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="limit">The limit of trades</param>
            <param name="fromId">Return trades since this id</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Gets symbol kline data
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The interval of the candles</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get balances of assets. Requires API credentials
            </summary>
            <param name="assets">The assets to get the balances for, empty for all</param>
            <returns>Dictionary of assets and their balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.GetOpenOrdersAsync(System.String,CoinEx.Net.Enums.OrderSide,System.Int32,System.Int32)">
            <summary>
            Gets a list of open orders for a symbol
            </summary>
            <param name="symbol">Symbol to get open orders for</param>
            <param name="side">Order side</param>
            <param name="offset">The offset in the list</param>
            <param name="limit">The limit of results</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToSymbolStateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol state updates for a specific symbol
            </summary>
            <param name="symbol">Symbol to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToSymbolStateUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol state updates for all symbols
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="limit">The limit of results to receive in a update</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates for a symbol
            </summary>
            <param name="symbol">The symbol to receive updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.CoinExKline}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates for a symbol
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="interval">The interval of the candle to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.CoinExBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of your balances, Receives updates whenever the balance for an asset changes
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Websocket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            </summary>
            <param name="symbols">The symbols to receive order updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExAssetConfig">
            <summary>
            Asset config
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.CanDeposit">
            <summary>
            Deposit is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.CanWithdraw">
            <summary>
            Withdraw is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.MinDeposit">
            <summary>
            Minimal deposit quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.MinWithdraw">
            <summary>
            Minimal withdrawal quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExAssetConfig.WithdrawFee">
            <summary>
            Withdraw fee
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExBalance.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExBalance.Available">
            <summary>
            The quantity of the asset that is available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExBalance.Frozen">
            <summary>
            The quantity of the asset not currently available
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExClientSpotOptions">
            <summary>
            Client options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExClientSpotOptions.Default">
            <summary>
            Default options for the spot client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExClientSpotOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExClientSpotOptions.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExClientSpotOptions.Copy``1(``0,``0)">
            <summary>
            Copy the values of the def to the input
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="def"></param>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSocketClientSpotOptions">
            <summary>
            Socket client options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientSpotOptions.Default">
            <summary>
            Default options for the spot client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientSpotOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientSpotOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not supported on CoinEx
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExSocketClientSpotOptions.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExSocketClientSpotOptions.Copy``1(``0,``0)">
            <summary>
            Copy the values of the def to the input
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="def"></param>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExOrderBookOptions">
            <summary>
            Order book options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBookOptions.SocketClient">
            <summary>
            The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExOrderBookOptions.#ctor(CoinEx.Net.Interfaces.Clients.Socket.ICoinExSocketClientSpot)">
            <summary>
            ctor
            </summary>
            <param name="client">The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.</param>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.ActualQuantity">
            <summary>
            The actual quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.ActualQuantityDisplay">
            <summary>
            The display for the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.AddExplorer">
            <summary>
            Depositor
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Quantity">
            <summary>
            The total quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.QuantityDisplay">
            <summary>
            The display for the quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Address">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.AddressDisplay">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Id">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.CoinType">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Confirmations">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.CreateTime">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Explorer">
            <summary>
            Explorer
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Remark">
            <summary>
            Remarks
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.StatusDisplay">
            <summary>
            Status Displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.TransferMethod">
            <summary>
            transfer method
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDeposit.TransactionIdDisplay">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExDepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepositAddress.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepositAddress.CreateTime">
            <summary>
            Time the address was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepositAddress.Id">
            <summary>
            Deposit address id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepositAddress.IsBitcoinCash">
            <summary>
            Is bitcoin cash
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepositAddress.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExKline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.OpenTime">
            <summary>
            The open time of this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.OpenPrice">
            <summary>
            The price of the symbol when this kline started
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.ClosePrice">
            <summary>
            The price of the symbol when this kline ended
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.HighPrice">
            <summary>
            The highest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.LowPrice">
            <summary>
            The lowest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.QuoteVolume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExKline.Symbol">
            <summary>
            The symbol for this kline
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExMiningDifficulty">
            <summary>
            Mining difficulty info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExMiningDifficulty.Difficulty">
            <summary>
            The difficulty in CET/Hour
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExMiningDifficulty.Prediction">
            <summary>
            Estimated hourly mining yield to distribute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExMiningDifficulty.UpdateTime">
            <summary>
            The update time of the Prediction field
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExNonceProvider.GetNonce">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.QuoteFee">
            <summary>
            The fee of the order in quote
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.AveragePrice">
            <summary>
            Average price of the executed order for market orders
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.CloseTime">
            <summary>
            The time the order was finished
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.OrderFee">
            <summary>
            The fee of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.QuoteQuantityFilled">
            <summary>
            The value of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.QuantityRemaining">
            <summary>
            The quantity still left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.MakerFeeRate">
            <summary>
            The maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.OrderType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.SourceId">
            <summary>
            The source id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.ClientOrderId">
            <summary>
            The client id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.TakerFeeRate">
            <summary>
            The taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrder.Side">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBook.LastPrice">
            <summary>
            The price of the last transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBook.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBook.Asks">
            <summary>
            The asks on this symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBook.Bids">
            <summary>
            The bids on this symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExDepthEntry">
            <summary>
            Depth info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepthEntry.Price">
            <summary>
            The price per unit of the entry
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExDepthEntry.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExOrderTrade">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Timestamp">
            <summary>
            The time the transaction was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.QuoteQuantity">
            <summary>
            The value of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Fee">
            <summary>
            The fee of the transactions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Role">
            <summary>
            The role of the transaction, maker or taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTrade.Side">
            <summary>
            The role of the transaction, maker or taker
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExOrderTradeExtended">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTradeExtended.Symbol">
            <summary>
            The symbol of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderTradeExtended.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExPagedResult`1.Count">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExPagedResult`1.CurrentPage">
            <summary>
            The page currently returned
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExPagedResult`1.Data">
            <summary>
            The results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExPagedResult`1.HasNext">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExPagedResult`1.TotalItems">
            <summary>
            Total items
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExPagedResult`1.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSymbol">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.Name">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.MinQuantity">
            <summary>
            The minimum quantity that can be traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.MakerFeeRate">
            <summary>
            The fee for the maker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.TakerFeeRate">
            <summary>
            The fee for the taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.PricingName">
            <summary>
            The asset being that is being traded against
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.PricingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.TradingName">
            <summary>
            The asset being traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbol.TradingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolState.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolState.Ticker">
            <summary>
            The symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSymbolStatesList">
            <summary>
            Symbol state list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStatesList.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStatesList.Tickers">
            <summary>
            The data specified as symbol -> symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSymbolStateData">
            <summary>
            Symbol state data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.BestAskPrice">
            <summary>
            The best buy price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.BestAskQuantity">
            <summary>
            The quantity of the best buy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.BestBidPrice">
            <summary>
            The best sell price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.BestBidQuantity">
            <summary>
            The quantity of the best sell price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.OpenPrice">
            <summary>
            The open price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.HighPrice">
            <summary>
            The high price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.LowPrice">
            <summary>
            The low price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.LastPrice">
            <summary>
            The price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolStateData.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSymbolTrade">
            <summary>
            Symbol trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSymbolTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.ActualQuantity">
            <summary>
            The actual quantity of the withdrawal, i.e. the quantity which will be transferred to the destination address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.Quantity">
            <summary>
            The total quantity of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.Address">
            <summary>
            The destination address of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.CoinType">
            <summary>
            The name of the asset of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.Id">
            <summary>
            The id of this withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.Confirmations">
            <summary>
            The current number of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.CreateTime">
            <summary>
            The time the withdrawal was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.TransactionFee">
            <summary>
            The fee for the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Websocket.CoinExSocketOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Quantity">
            <summary>
            The total quantity of the oder
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.FeeAsset">
            <summary>
            The asset the fee is on
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.TransactionFee">
            <summary>
            The executed quantity transaction fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.QuoteQuantityExecuted">
            <summary>
            The executed value in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.QuantityExecuted">
            <summary>
            The executed quantity in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Id">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.QuantityRemaining">
            <summary>
            Quantity of order left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.MakerFee">
            <summary>
            Maker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.UpdateTime">
            <summary>
            The last update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Side">
            <summary>
            The order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Source">
            <summary>
            The source of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.TakerFee">
            <summary>
            Taker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.UserId">
            <summary>
            The id of the user that placed the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrder.ClientOrderId">
            <summary>
            The client id
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook.LastPrice">
            <summary>
            The price of the last trade. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook.FullUpdate">
            <summary>
            Whether it is a full update or an update based on the last update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook.Timestamp">
            <summary>
            The timestamp of the data. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook.Asks">
            <summary>
            The asks on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderBook.Bids">
            <summary>
            The bids on the symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Websocket.CoinExSocketOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderUpdate.UpdateType">
            <summary>
            The type of update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketOrderUpdate.Order">
            <summary>
            The order info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Websocket.CoinExSocketPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketPagedResult`1.Limit">
            <summary>
            The number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketPagedResult`1.Offset">
            <summary>
            The offset in the list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketPagedResult`1.Total">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketPagedResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.Close">
            <summary>
            The close price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.QuoteVolume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.HighPrice">
            <summary>
            The highest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.LastPrice">
            <summary>
            The last symbol trade in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.LowPrice">
            <summary>
            The lowest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.OpenPrice">
            <summary>
            The open price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.Period">
            <summary>
            The period the data is over in seconds
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.Volume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolState.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade">
            <summary>
            Transaction data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade.Side">
            <summary>
            The orde side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade.OrderId">
            <summary>
            The order id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Websocket.CoinExSocketSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
    </members>
</doc>
